{"version":3,"sources":["actions/actions.js","algorithms/mergesort.js","algorithms/bubblesort.js","algorithms/heapsort.js","algorithms/quicksort.js","utils/utils.js","components/Toolbar.js","constants/constants.js","components/Box.js","App.js","serviceWorker.js","reducers/array.js","reducers/toolbar.js","reducers/index.js","index.js"],"names":["arrayChange","array","type","mergeSort","arr","states","push","_mergeSort","l","r","m","Math","floor","start","mid","end","start2","value","index","merge","length","bubbleSort","inputArr","result","len","i","j","tmp","_bubbleSort","heapSort","n","heapify","temp","_heapSort","largest","swap","quickSort","_quickSort","low","high","pivot","partition","generateArray","min","max","Array","Set","ceil","random","Toolbar","props","onSort","bind","makeNewArray","onSpeedSliderChange","onSizeSliderChange","onAlgoChage","newArrayButtonRef","React","createRef","sortButtonRef","speedSliderRef","sizeSliderRef","selectRef","me","this","sortSpeed","toolbar","algo","isAlreadySorted","disableControls","arrayStates","getSortFn","sortFn","timerId","setInterval","clearInterval","enableControls","speedSlider","current","newSpeed","parseInt","changeSpeed","e","sizeSlider","console","log","select","changeAlgo","sortButton","newArrayButton","disabled","controlsEnabled","id","onClick","ref","onChange","Component","connect","state","dispatch","arrayState","speed","newAlgo","Box","map","className","key","style","height","backgroundColor","App","Boolean","window","location","hostname","match","action","initalState","arraySize","combineReducers","initialState","store","createStore","rootReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20deddb9.chunk.js","sourcesContent":["//actions.js\n\nexport const ARRAY_CHANGE = 'ARRAY_CHANGE';\nexport const DISABLE_CONTROLS = 'DISABLE_CONTROLS'\nexport const ENABLE_CONTROLS = 'ENABLE_CONTROLS'\nexport const CHANGE_SPEED = 'CHANGE_SPEED'\nexport const CHANGE_ALGO = 'CHANGE_ALGO'\n\nexport const arrayChange = (array) => {\n    return {\n        type: ARRAY_CHANGE,\n        array\n    };\n}\n\nexport const disableControls = () => {\n    return {\n        type: DISABLE_CONTROLS\n    };\n}\n\nexport const enableControls = () => {\n    return {\n        type: ENABLE_CONTROLS\n    };\n}\n\nexport const changeSpeed = newSpeed => {\n    return {\n        type: CHANGE_SPEED,\n        speed: newSpeed\n    };\n}\nexport const changeAlgo = newAlgo => {\n    return {\n        type: CHANGE_ALGO,\n        algo: newAlgo\n    };\n}","export default function mergeSort(arr) {\n    var states = [];\n    states.push([...arr]);\n    _mergeSort(arr, 0, arr.length - 1);\n    function _mergeSort(arr, l, r) {\n        if (l < r) {\n\n            let m = Math.floor(l + (r - l) / 2);\n\n            _mergeSort(arr, l, m);\n            _mergeSort(arr, m + 1, r);\n            merge(arr, l, m, r);\n            states.push([...arr]);\n        }\n    }\n    return states;\n\n    function merge(arr, start, mid, end) {\n        var start2 = mid + 1;\n    \n        if (arr[mid] <= arr[start2]) {\n            return;\n        }\n    \n        while (start <= mid && start2 <= end) {\n    \n            if (arr[start] <= arr[start2]) {\n                start++;\n            }\n            else {\n                var value = arr[start2];\n                var index = start2;\n    \n                while (index !== start) {\n                    arr[index] = arr[index - 1];\n                    index--;\n                }\n                arr[start] = value;\n    \n                states.push([...arr]);\n                start++;\n                mid++;\n                start2++;\n            }\n        }\n    }\n}\n","export default function bubbleSort(inputArr) {\n    let result = [];\n    result.push([...inputArr]);\n    _bubbleSort(inputArr);\n    \n    function _bubbleSort(inputArr) {\n        let len = inputArr.length;\n        for (let i = 0; i < len; i++) {\n            for (let j = 0; j < len; j++) {\n                if (inputArr[j] > inputArr[j + 1]) {\n                    let tmp = inputArr[j];\n                    inputArr[j] = inputArr[j + 1];\n                    inputArr[j + 1] = tmp;\n                    result.push([...inputArr]);\n                }\n\n            }\n        }\n        return inputArr;\n    }\n    return result;\n}\n\n","export default function heapSort(arr) {\n    let states = [[...arr]];\n    _heapSort(arr);\n    function _heapSort(arr) {\n        var n = arr.length;\n\n        for (var i = Math.floor(n / 2 - 1); i >= 0; i--)\n            heapify(arr, n, i);\n\n        for (var i = n - 1; i > 0; i--) {\n            var temp = arr[0];\n            arr[0] = arr[i];\n            arr[i] = temp;\n\n            states.push([...arr]);\n            heapify(arr, i, 0);\n        }\n    }\n    return states;\n}\n\nfunction heapify(arr, n, i) {\n    var largest = i; \n    var l = 2 * i + 1;\n    var r = 2 * i + 2; \n\n    if (l < n && arr[l] > arr[largest])\n        largest = l;\n\n    if (r < n && arr[r] > arr[largest])\n        largest = r;\n\n    if (largest != i) {\n        var swap = arr[i];\n        arr[i] = arr[largest];\n        arr[largest] = swap;\n\n        heapify(arr, n, largest);\n    }\n}\n","export default function quickSort(arr) {\n    let states = [];\n    states.push([...arr]);\n    _quickSort(arr, 0, arr.length -1);\n    function _quickSort(arr, low, high) {\n        if (low < high) {\n            var pivot = partition(arr, low, high);\n\n            _quickSort(arr, low, pivot - 1);\n            _quickSort(arr, pivot + 1, high);\n\n            states.push([...arr]);\n\n        }\n    }\n    return states;\n\n    function partition(arr, low, high) {\n        var pivot = arr[high];\n        var i = (low - 1); \n        for (var j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                i++;\n\n                var temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n\n                states.push([...arr]);\n            }\n        }\n\n        temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n\n        return i + 1;\n    }\n}\n\n","import {\n    MERGESORT,\n    BUBBLESORT,\n    HEAPSORT,\n    QUICKSORT\n} from './../constants/constants'\nimport mergeSort from './../algorithms/mergesort'\nimport bubbleSort from './../algorithms/bubblesort'\nimport heapSort from './../algorithms/heapsort'\nimport quickSort from './../algorithms/quicksort'\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nexport function generateArray(length) {\n    let array = new Array(length);\n    let set = new Set();\n    for (var i = 0; i < array.length; i++) {\n        array[i] = getRandomInt(3, 98);\n    }\n    return array;\n}\nexport function getSortFn(algo) {\n    switch (algo) {\n        case MERGESORT:\n            return mergeSort;\n        case BUBBLESORT:\n            return bubbleSort;\n        case HEAPSORT:\n            return heapSort;\n        case QUICKSORT:\n            return quickSort;\n        default:\n            return mergeSort;\n    }\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport { arrayChange, disableControls, enableControls, changeSpeed, changeAlgo } from './../actions/actions'\nimport { generateArray } from './../utils/utils'\nimport { getSortFn } from './../utils/utils'\nimport {\n    MERGESORT,\n    BUBBLESORT,\n    HEAPSORT,\n    QUICKSORT\n} from './../constants/constants'\n\nclass Toolbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.array = props.array;\n        this.onSort = this.onSort.bind(this);\n        this.makeNewArray = this.makeNewArray.bind(this);\n        this.onSpeedSliderChange = this.onSpeedSliderChange.bind(this);\n        this.onSizeSliderChange = this.onSizeSliderChange.bind(this);\n        this.onAlgoChage = this.onAlgoChage.bind(this);\n\n        this.newArrayButtonRef = React.createRef();\n        this.sortButtonRef = React.createRef();\n        this.speedSliderRef = React.createRef();\n        this.sizeSliderRef = React.createRef();\n        this.selectRef = React.createRef();\n    }\n    onSort() {\n        var me = this;\n        let array = this.props.array;\n        let sortSpeed = this.props.toolbar.sortSpeed;\n        let algo = this.props.toolbar.algo;\n        if (!this.isAlreadySorted()) {\n            this.disableControls();\n            // let arrayStates = bubbleSort(array);\n            let sortFn = getSortFn(algo);\n            let arrayStates = sortFn(array);\n            // dispatch(arrayChange([66,44,33]));\n            let i = 0;\n            let timerId = setInterval(function () {\n                me.props.onSort(arrayStates[i]);\n                i++;\n                if (i === arrayStates.length) {\n                    clearInterval(timerId);\n                    me.enableControls();\n                }\n            }, sortSpeed);\n        }\n    }\n    makeNewArray() {\n        let array = generateArray(this.props.array.length);\n        this.props.makeNewArray(array);\n    }\n    disableControls() {\n        this.props.disableControls()\n    }\n    enableControls() {\n        this.props.enableControls()\n    }\n    onSpeedSliderChange() {\n        let speedSlider = this.speedSliderRef.current;\n        let value = parseInt(speedSlider.value);\n        let newSpeed = 210 - value;\n        this.props.changeSpeed(newSpeed);\n    }\n    onSizeSliderChange(e) {\n        let sizeSlider = this.sizeSliderRef.current;\n        console.log(sizeSlider.value);\n        let size = parseInt(sizeSlider.value);\n        let array = generateArray(size);\n        this.props.makeNewArray(array);\n    }\n    onAlgoChage() {\n        let select = this.selectRef.current;\n        this.props.changeAlgo(select.value);\n    }\n    isAlreadySorted() {\n        let array = this.props.array;\n        for (var i = 1; i < array.length; i++) {\n            if (array[i - 1] > array[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    componentDidUpdate() {\n        let sortButton = this.sortButtonRef.current;\n        let newArrayButton = this.newArrayButtonRef.current;\n        let speedSlider = this.speedSliderRef.current;\n        let sizeSlider = this.sizeSliderRef.current;\n\n        sortButton.disabled = !this.props.toolbar.controlsEnabled;\n        newArrayButton.disabled = !this.props.toolbar.controlsEnabled;\n        speedSlider.disabled = !this.props.toolbar.controlsEnabled;\n        sizeSlider.disabled = !this.props.toolbar.controlsEnabled;\n    }\n    componentDidMount() {\n        let sizeSlider = this.sizeSliderRef.current;\n        sizeSlider.value = this.props.array.length;\n        let speedSlider = this.speedSliderRef.current;\n        speedSlider.value = this.props.toolbar.sortSpeed;\n    }\n    render() {\n        return <div id='toolbar'>\n            {/* <div></div> */}\n            <div>\n                <button onClick={this.makeNewArray} ref={this.newArrayButtonRef} >New Array</button>\n            </div>\n            <div>\n                <button onClick={this.onSort} ref={this.sortButtonRef}>sort</button>\n            </div>\n            <div>\n                <label>speed</label>\n                <input type='range' id='speed' min={10} max={200} ref={this.speedSliderRef} onChange={this.onSpeedSliderChange} />\n            </div>\n            <div>\n                <label>size</label>\n                <input type='range' id='length' min={2} max={100} ref={this.sizeSliderRef} onChange={this.onSizeSliderChange} />\n            </div>\n            <div>\n                <select ref={this.selectRef} onChange={this.onAlgoChage}>\n                    <option value={MERGESORT}>mergesort</option>\n                    <option value={BUBBLESORT}>bubblesort</option>\n                    <option value={HEAPSORT}>heapsort</option>\n                    <option value={QUICKSORT}>quicksort</option>\n                </select>\n            </div>\n\n        </div>;\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        array: state.array,\n        toolbar: state.toolbar\n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSort: function (arrayState) {\n            dispatch(arrayChange(arrayState));\n        },\n        makeNewArray: function (array) {\n            dispatch(arrayChange(array))\n        },\n        disableControls: function () {\n            dispatch(disableControls())\n        },\n        enableControls: function () {\n            dispatch(enableControls())\n        },\n        changeSpeed: function (newSpeed) {\n            dispatch(changeSpeed(newSpeed));\n        },\n        changeAlgo: function (newAlgo) {\n            dispatch(changeAlgo(newAlgo));\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Toolbar)","export const MERGESORT = 'MERGESORT'\nexport const BUBBLESORT = 'BUBBLESORT'\nexport const HEAPSORT = 'HEAPSORT'\nexport const QUICKSORT = 'QUICKSORT'","import React from 'react'\nimport { connect } from 'react-redux'\n\nclass Box extends React.Component {\n    render() {\n        let { array } = this.props;\n        return (\n            <div id='box'>\n                {array.map((value, index) =>\n                    <div className='element'\n                        key={index}\n                        style={{\n                            height: `${value}%`,\n                            backgroundColor: `rgba(98,00,238,${value / 100 < 0.50 ? 0.50 : value / 100})`\n                            // backgroundColor: `rgba(3,218,197,255)`\n                        }}>\n                    </div>)}\n            </div>);\n    }\n}\nconst mapStateToProps = (state) => {\n    let { array } = state;\n    return {\n        array\n    };\n};\nexport default connect(mapStateToProps)(Box);","import React from 'react';\nimport Toolbar from './components/Toolbar'\nimport Box from './components/Box'\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div id='full-screen'>\n\t\t\t\t<Toolbar></Toolbar>\n\t\t\t\t<div id='background'>\n\t\t\t\t\t<Box></Box>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ARRAY_CHANGE } from './../actions/actions'\n\nconst array = (array = [], action) => {\n    if (action.type === ARRAY_CHANGE) {\n        return action.array;\n    }\n    return array;\n}\n\nexport default array;","import { ENABLE_CONTROLS, DISABLE_CONTROLS, CHANGE_SPEED, CHANGE_ALGO } from './../actions/actions'\nlet initalState = {\n    controlsEnabled: true,\n    sortSpeed: 50,//ms \n    arraySize: 10,\n}\nexport default function toolbar(state = initalState, action) {\n    if (action.type === ENABLE_CONTROLS) {\n        return {\n            ...state,\n            controlsEnabled: true\n        }\n    } else if (action.type === DISABLE_CONTROLS) {\n        return {\n            ...state,\n            controlsEnabled: false\n        };\n    } else if (action.type === CHANGE_SPEED) {\n        return {\n            ...state,\n            sortSpeed: action.speed\n        };\n    } else if (action.type === CHANGE_ALGO) {\n        return {\n            ...state,\n            algo: action.algo\n        };\n    } else {\n        return state;\n    }\n}","//reducers index.js\nimport { combineReducers } from 'redux'\nimport array from './array'\nimport toolbar from './toolbar'\n\nexport default combineReducers({\n    array, toolbar\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers/index'\nimport { generateArray } from './utils/utils'\nimport { MERGESORT } from './constants/constants'\n/*\ndisable the sorting button after its pressed once\nIMPORTNANT : GET PROVIDER TO WORK ffuck\n*/\nlet initialState = {\n\ttoolbar: {\n\t\tsortSpeed: 50,//ms 10 - 200\n\t\tarraySize: 10,\n\t\tcontrolsEnabled: true,\n\t\talgo: MERGESORT\n\t},\n\t// array: [60, 45, 30, 25, 90, 66, 98, 29, 78, 50, 55, 22, 88, 21, 76, 20, 10, 36, 56, 79, 44]\n\tarray: generateArray(10)\n}\nlet store = createStore(rootReducer, initialState,\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}><App /></Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}